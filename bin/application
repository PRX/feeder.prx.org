#!/bin/sh

PROCESS=
CMD_ARGS=

ApplicationUsage () {
  echo "usage: application [ help | web | worker | console | migrate | test | guard | sqs | rake | rails | release_episodes | -- ]"
}

ApplicationParseOpts () {
  PROCESS=$1
  shift
  CMD_ARGS=$*
}

ApplicationUpdate () {
  bundle exec rake -vt announce:verify_config db:create db:migrate
}

SetWorkerDatabasePoolSize(){
  if [ ! -z "$WORKER_DATABASE_POOL_SIZE" ]; then
    echo "altering database pool size for workers: $WORKER_DATABASE_POOL_SIZE"
    export DATABASE_POOL_SIZE=$WORKER_DATABASE_POOL_SIZE
  fi
}

WaitForPostgres () {
  export PGPASSWORD="$DB_ENV_POSTGRES_PASSWORD"
  until psql -h "$DB_PORT_5432_TCP_ADDR" -p "$DB_PORT_5432_TCP_PORT" -U "$DB_ENV_POSTGRES_USER" -c '\l' &> /dev/null; do
    >&2 echo "Postgres is unavailable - sleeping"
    sleep 3;
  done
}

ApplicationRun () {
  if [ "$PROCESS" = "help" ] ; then
    ApplicationUsage
    exit
  fi

  CMD=
  if [ "$PROCESS" = "web" ] ; then
    CMD="bundle exec puma -C config/puma.rb"
  elif [ "$PROCESS" = "worker" ] ; then
    SetWorkerDatabasePoolSize
    CMD="bundle exec shoryuken --verbose --rails --config config/shoryuken.yml"
  elif [ "$PROCESS" = "console" ] ; then
    CMD="bundle exec rails console"
  elif [ "$PROCESS" = "test" ] ; then
    CMD="bundle exec rake db:create test RAILS_ENV=test"
  elif [ "$PROCESS" = "guard" ] ; then
    CMD="bundle exec guard"
  elif [ "$PROCESS" = "migrate" ] ; then
    CMD="bundle exec rake -vt db:create db:migrate"
  elif [ "$PROCESS" = "sqs" ] ; then
    CMD="bundle exec rake -vt sqs:create announce:configure_broker"
  elif [ "$PROCESS" = "release_episodes" ] ; then
    CMD="bundle exec rake -vt feeder:release_episodes"
  elif [ "$PROCESS" = "rails" ] ; then
    CMD="bundle exec rails"
  elif [ "$PROCESS" = "rake" ] ; then
    CMD="bundle exec rake"
  elif [ "$PROCESS" = "--" ] ; then
    CMD=
  else
    echo "ERROR: $PROCESS is not a valid command."
    ApplicationUsage
    exit
  fi

  WaitForPostgres

  if [ \( "$PROCESS" = "web" \) -o \( "$PROCESS" = "worker" \) ] ; then
    ApplicationUpdate
  fi

  $CMD $CMD_ARGS
}

ApplicationParseOpts $*
ApplicationRun
